# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        public: true

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Component}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    AppBundle\Service\EntityManagerMapperService:
        arguments:
            - '%customer_db_credentials%'
            - '@service_container'
            - '@doctrine.orm.customer_manager_configurator'
            - '@doctrine.orm.customer_entity_manager'

    AppBundle\Security\CompanyXSuperUserCookieEncoder:
        class: AppBundle\Security\CompanyXSuperUserCookieEncoder
        arguments: ['%companyX_super_user_encoder_key_length%', '%companyX_super_user_encoder_key_word%', '%companyX_super_user_encoder_key_generator_string%', '%companyX_super_user_encoder_sign%']

    AppBundle\Service\ShiftSwapRequestNotifierService:
        class: AppBundle\Service\ShiftSwapRequestNotifierService
        public: true
        arguments: ['%postmark_from_email%', '%default_companyX_webroot%', '%default_companyX_application_name%']

    # Commands in the App
    AppBundle\Command\CustomerDbCredentialsCommand:
        arguments:
            - '%database_host%'
            - '%database_port%'
            - '%customer_db_credentials%'

    # Register Swift_PostmarkTransport as a service so that it can be used by Swiftmailer as default transport
    swiftmailer.mailer.default.transport:
        class: AppBundle\Component\SwiftTransport\Swift_PostmarkTransport
        public: false
        arguments: ['%postmark_api_token%', '@swiftmailer.mailer.default.transport.eventdispatcher']

    AppBundle\EventListener\AssignmentListener:
        class: AppBundle\EventListener\AssignmentListener
        tags:
            - { name: doctrine.orm.entity_listener, entity_manager: customer }

    AppBundle\EventListener\ClientListener:
        class: AppBundle\EventListener\ClientListener
        arguments: ['%security.role_hierarchy.roles%']
        tags:
            - { name: doctrine.orm.entity_listener, entity_manager: customer }

    AppBundle\EventListener\RegisterListener:
        class: AppBundle\EventListener\RegisterListener
        tags:
            - { name: doctrine.orm.entity_listener, entity_manager: customer }

    AppBundle\EventListener\ShiftSwapRequestListener:
        class: AppBundle\EventListener\ShiftSwapRequestListener
        tags:
            - { name: doctrine.orm.entity_listener, entity_manager: customer }

    AppBundle\EventListener\ClockMomentListener:
        class: AppBundle\EventListener\ClockMomentListener
        tags:
            - { name: doctrine.orm.entity_listener, entity_manager: customer }

    AppBundle\EventListener\EntityLogSubscriber:
        class: AppBundle\EventListener\EntityLogSubscriber
        tags:
            - { name: doctrine.event_subscriber, entity_manager: customer }

    AppBundle\EventListener\OnAuthenticationSuccessSetFilterListener:
        arguments:
            - '@doctrine.orm.customer_entity_manager'
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_authenticated, method: onAuthenticationSuccess }

    AppBundle\EventListener\ExceptionSubscriber:
        class: AppBundle\EventListener\ExceptionSubscriber
        tags:
            - { name: kernel.event_subscriber }

    AppBundle\Validator\Constraints\RegisterConstraints\AvailabilityBlockPlannedValidator:
        arguments:
            - '@doctrine.orm.customer_entity_manager'

    AppBundle\Validator\Constraints\RegisterConstraints\VacationTimeoutValidator:
        arguments:
            - '@doctrine.orm.customer_entity_manager'

    AppBundle\Validator\Constraints\RegisterConstraints\InvalidPostFieldValidator:
        arguments:
            - '@doctrine.orm.customer_entity_manager'

    AppBundle\Validator\Constraints\RegisterConstraints\InvalidUpdateFieldValidator:
        arguments:
            - '@doctrine.orm.customer_entity_manager'

    AppBundle\Validator\Constraints\ShiftSwapRequestConstraints\InvalidUpdateFieldValidator:
        arguments:
            - '@doctrine.orm.customer_entity_manager'

    # Configurations for normalizers
    null_value_normalizer:
        class: AppBundle\Component\Serializer\Normalizer\NullValueNormalizer
        public: false
        tags:
            # Priority value determines matching order of the normalizers used for the serializer service.
            # Normalizers with higher priority values are applied before the ones with lower values. Default -1000.
            - { name: serializer.normalizer, priority: 1 }

    default_timezone_date_time_normalizer:
        class: AppBundle\Component\Serializer\Normalizer\DefaultTimezoneDateTimeNormalizer
        public: false
        tags:
            # Priority value determines matching order of the normalizers used for the serializer service.
            # Normalizers with higher priority values are applied before the ones with lower values. Default -1000.
            - { name: serializer.normalizer, priority: 2 }

    date_interval_normalizer:
        class: AppBundle\Component\Serializer\Normalizer\DateIntervalNormalizer
        public: false
        tags:
            # Priority value determines matching order of the normalizers used for the serializer service.
            # Normalizers with higher priority values are applied before the ones with lower values. Default -1000.
            - { name: serializer.normalizer, priority: 3 }

#    TODO: remove these after upgrading packages
    Lexik\Bundle\JWTAuthenticationBundle\Services\JWTManager:
        autowire: true

